# ########################################################################
# 本文件定义的规则, 用于 URL POST 请求数检测.
#
# ########################################################################
import "alert/http/flows/cfg/post_url.rule";

# ########################################################################
# 第 1 步:
#	获取最近__range_time_unit__的 url 及其 flow。
#
# ########################################################################
def __query_now(listRes, args) {
	sql = "
		SELECT
			SUM(flow) AS flow
		FROM
			'httpstat-*'
		WHERE
			last(%(__range_time_unit__)) 
			AND query_string('method:POST')
		GROUP BY
			url
		LIMIT 500
	";
	
	result = query(sql);
	return result;
}

# ########################################################################
# 第 2 步:
# 	根据第1步产生的 url list ，对比过去__range_check_hisdata__的每个url同一时间段的flow
#
# ########################################################################

def __query_his(res,args) {
	if len(res) == 0 {
		return res;
	}
	
	urllist = item_values(res,"url");
	url_x0 = agg_items(res,"url");
	
	sql = "
                SELECT
                        SUM(flow) AS flow
                FROM
                        'httpstat-*'
                WHERE
                        last_days(%(__range_check_hisdata__),%(__range_time_unit__))
                        AND query_string('method:POST')
                        AND url IN $(urllist)
		GROUP BY
			url,
			date_histogram(1d) AS date
		LIMIT
			1000,50
	";
	result = query(sql);
	result = agg_values(result,"url","flow");
	
	info_alert_url = [];
	for item in result {
		url = item["url"];
		xlist = item["flow"];
		x0 = url_x0[item["url"]][0]["flow"];
		
		value = deviation_model(x0,xlist);
		if value != -1 {
			info_alert_url = append(info_alert_url,{"url":url,"flow":x0,"value":value});
		}
	}
	return __alert(info_alert_url,"INFO",__threshold__);
}

def __query_his_week(res,args) {
        if len(res) == 0 {
                return res;
        }

        urllist = item_values(res,"url");
        url_x0 = agg_items(res,"url");

        sql = "
                SELECT
                        SUM(flow) AS flow
                FROM
                        'httpstat-*'
                WHERE
                        last_weeks(5,%(__range_time_unit__))
                        AND query_string('method:POST')
                        AND url IN $(urllist)
                GROUP BY
                        url,
                        date_histogram(1d) AS date
                LIMIT
                        1000,50
        ";
        result = query(sql);
        result = agg_values(result,"url","flow");

        critical_alert_url = [];
        warning_alert_url = [];
        for item in result {
                url = item["url"];
                xlist = item["flow"];
                x0 = url_x0[item["url"]][0]["flow"];

                value = deviation_model(x0,xlist);
                if value != -1 {
                        if value > __threshold_warning__ {
                                critical_alert_url = append(critical_alert_url,{"url":url,"flow":x0,"value":value});
                        }
                        else{
                                warning_alert_url = append(warning_alert_url,{"url":url,"flow":x0,"value":value});
                        }
                }
	}
        __alert(critical_alert_url,"CRITICAL",__threshold_warning__);
        __alert(warning_alert_url,"WARNING",__threshold__);
}

# 偏差程度检查模型
def deviation_model(x0,xlist) {
	# 假设 x0 在 xlist 的 10% 到 90% 之间，则认为 x0 正常返回-1。
	nintyPercent_xlist = percentile(xlist,90);
	tenPercent_xlist   = percentile(xlist,10);
	if x0< nintyPercent_xlist {
		if x0> tenPercent_xlist {
			return -1;
		}
	}
	median_xlist = median(xlist);
	# 当 median 为0时没有检测意义，返回 -1。
#	if median_xlist == 0 {
#		return -1;
#	}
	# 求 xlist 与 median 的差的绝对值
	abs_deviation_list = [];
	for(i=0;i<len(xlist);i++){
		abs_deviation = xlist[i]<median_xlist ? median_xlist-xlist[i] : xlist[i]-median_xlist;
		abs_deviation_list = append(abs_deviation_list,abs_deviation);
	}
	# MAD 为绝对差的中值
	mad = median(abs_deviation_list);
	# 求 x0 与 median 的绝对差
	abs_dev0 = x0<median_xlist ? tenPercent_xlist-x0 : x0-nintyPercent_xlist;
	# MAD 越接近 0 说明数据越平稳，一旦出现波动，使用z分数评估偏离状况
	if (mad == 0) {
		if(abs_dev0 != 0){
			mean_xlist = avg(xlist);
			sd_xlist = stdev(xlist);
			if sd_xlist == 0 {
				temp = (x0 - mean_xlist)*50/mean_xlist;
			}
			else {
				temp = (x0 - mean_xlist)/sd_xlist;
			}
		}
		# 数据量不足或者 abs_dev0 为 0 时，返回 -1。
		else {
			return -1;
		}
	}
	else{
		temp = abs_dev0/mad;
	}
	
	if(temp > __threshold__) {
		return temp;
	}else{
		return -1;
	}
}

# ########################################################################
# 报警输出.
#
# 在该函数内需指定:
# __level__: 报警等级.
# ########################################################################
def __alert(list, level,threshold) {
	
	__level__   = level;
	__desc_subtype__ = "POST URL 连接数偏离程度(每%(__range_time_unit__)) > " + fmt_int(threshold) + ".";
	item_set(list,"@timestamp",time("T"));
	alert(list);
#	print(list);
}


# ########################################################################
# 配置并调用函数链 (规则入口).
#
# 函数链配置包括:
#	name: 函数名;
#	args: 函数参数.
#
# 函数链中的函数原型为:
#	def func(result, args);
#
# 参数说明;
#	result: 上一个函数的返回值;
#			函数链中的第一个函数接收到的该参数为 null.
#	args:   函数链配置时指定的参数.
# ########################################################################
call_list([
	{ "name": "__query_now",     "args": {} },
	{ "name": "__query_his",     "args": {} },
	{ "name": "__query_his_week","args": {} }
]);

